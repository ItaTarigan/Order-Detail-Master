<h2><asp:Literal ID="LitCommodity" runat="server"></asp:Literal></h2>
<div class="row mt-2" runat="server" id="TreePanel" visible="true">

    <asp:TreeView ID="TreeNav" runat="server" ImageSet="Simple" NodeIndent="10">
        <HoverNodeStyle Font-Underline="True" ForeColor="#DD5555" />
        <NodeStyle Font-Names="Verdana" Font-Size="8pt" ForeColor="Black" HorizontalPadding="0px" NodeSpacing="0px" VerticalPadding="0px" />
        <ParentNodeStyle Font-Bold="False" />
        <SelectedNodeStyle Font-Underline="True" ForeColor="#DD5555" HorizontalPadding="0px" VerticalPadding="0px" />
    </asp:TreeView>
</div>

<div class="row mt-2" runat="server" id="ButtonPanel" visible="false">

    <asp:Repeater ID="RptButton" runat="server">
        <ItemTemplate>
            <div class="col-lg-1">
                <asp:Button ID="BtnNode" CommandName="Select" CommandArgument='<%# Eval("Id") %>' CssClass="btn btn-info" runat="server" Text='<%# Eval("CommodityName") %>' />
            </div>
        </ItemTemplate>
    </asp:Repeater>

</div>
<div class="row mt-2">
    <div class="col-lg">
        <asp:Button ID="BtnExit" CssClass="btn btn-danger" runat="server" Text="Kembali" />
    </div>
</div>

@code {
    static List<ordernavigationtbl> CacheData;
    public enum NavigationMode { TreeNav, ButtonNav };
    public NavigationMode Mode { get; set; }
    public delegate void ExitNavigation();
    public event ExitNavigation exitNavigation;

    public delegate void ComoditySelected(int commodityNo, string commodityName);
    public event ComoditySelected comoditySelected;
    public int CurrentParentId
    {
        get
        {
            if (ViewState["CurParent"] == null)
            {
                ViewState["CurParent"] = -1;
            }
            return (int)ViewState["CurParent"];
        }
        set
        {
            ViewState["CurParent"] = value;
        }
    }
    public void Reset()
    {
        if (Mode == NavigationMode.TreeNav)
        {

        }
        else
        {
            CurrentParentId = -1;
            LoadButton();
        }
    }
    protected void Page_Load(object sender, EventArgs e)
    {
        if (CacheData == null)
        {
            using (var db = new smlpobDB())
            {
                CacheData = (from x in db.ordernavigationtbls
                             select x).ToList();
            }
        }
        LitCommodity.Text = LanguageHelper.GetTranslation("choose_a_comodity");
        BtnExit.Text = LanguageHelper.GetTranslation("back");
        RptButton.ItemCommand += RptButton_ItemCommand;
        BtnExit.Click += BtnExit_Click;
        TreeNav.SelectedNodeChanged += TreeNav_SelectedNodeChanged;
        if (!IsPostBack)
        {
            if (Mode == NavigationMode.TreeNav)
            {
                TreePanel.Visible = true;
                ButtonPanel.Visible = false;
                LoadTree();
            }
            else
            {
                TreePanel.Visible = false;
                ButtonPanel.Visible = true;
                CurrentParentId = -1;
                LoadButton();
            }
        }
    }

    private void RptButton_ItemCommand(object source, RepeaterCommandEventArgs e)
    {
        if (e.CommandName == "Select")
        {
            var btn = source as Button;
            int.TryParse(e.CommandArgument.ToString(), out var nodeId);
            using (var db = new smlpobDB())
            {
                var selNode = CacheData.Where(x => x.id == nodeId).FirstOrDefault();
                if (selNode != null)
                {
                    if (selNode.commodityNo == 0 && selNode.isLeaf != "1")
                    {
                        CurrentParentId = selNode.id;
                        LoadButton();
                    }
                    else
                    {
                        comoditySelected?.Invoke(selNode.commodityNo, selNode.name);
                    }
                }
            }

        }
    }

    void LoadButton()
    {
        //using (smlpobDB db = new smlpobDB())
        {
            var childs = from x in CacheData
                         where x.parentId == CurrentParentId
                         select new { Id = x.id, CommodityName = x.name };
            RptButton.DataSource = childs.ToList();
            RptButton.DataBind();
        }
    }
    private void BtnExit_Click(object sender, EventArgs e)
    {
        exitNavigation?.Invoke();
    }

    private void TreeNav_SelectedNodeChanged(object sender, EventArgs e)
    {
        var tree1 = sender as TreeView;
        var node = tree1.SelectedNode;
        if (node != null)
        {
            int.TryParse(node.Value, out var valNode);
            if (valNode == 0) return;
            comoditySelected?.Invoke(int.Parse(node.Value), node.Text);
        }
    }

    void LoadTree()
    {
        TreeNode root = new TreeNode("Pelayanan", "0");
        TraverseTree(root, -1);
        TreeNav.Nodes.Clear();
        TreeNav.Nodes.Add(root);
    }

    void TraverseTree(TreeNode ParentNode, int ParentId)
    {
        //using(smlpobDB db = new smlpobDB())
        {
            var childs = from x in CacheData
                         where x.parentId == ParentId
                         select x;
            foreach (var item in childs)
            {
                var childNode = new TreeNode(item.name, item.commodityNo.ToString());
                ParentNode.ChildNodes.Add(childNode);
                TraverseTree(childNode, item.id);
            }
        }
    }
}
