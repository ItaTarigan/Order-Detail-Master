@page "/pages/private/masterdata/customersmaster"
@layout BalitTanahPelayanan.Shared.Master.MainMaster
@using System.Web;
@using Microsoft.AspNetCore.WebUtilities
@inject IToastService toastService
@using BalitTanahPelayanan.Data
@using BalitTanahPelayanan.Helpers
@using BalitTanahPelayanan.Models
@using BalitTanahPelayanan.Controllers
@using BalitTanahPelayanan.Services
@inject NavigationManager NavMgr
@inject IJSRuntime jsRuntime

@if (objCustomer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (ShowTable)
    {
        <TableTemplate Items="objCustomer">
            <TableHeader>
                <th class="sorting">Kode</th>
                <th class="sorting">Pelanggan</th>
                <th class="sorting">Email</th>
                <th class="sorting">Perusahaan</th>
                <th class="sorting">Alamat Perusahaan</th>
                <th class="sorting">Nomor Telpon Perusahaan</th>
                <th class="sorting">Email Perusahaan</th>
                <th class="sorting">Kode Akun</th>
                <th>Aksi</th>
            </TableHeader>
            <RowTemplate Context="customer">
                <td>@customer.CustomerNo.ToString()</td>
                <td>@customer.CustomerName</td>
                <td>@customer.CustomerEmail</td>
                <td>@customer.CompanyName</td>
                <td>@customer.CompanyAddress</td>
                <td>@customer.CompanyPhone</td>
                <td>@customer.CompanyEmail</td>
                <td>@customer.AccountNo</td>
                <td>
                    <a @onclick:preventDefault @onclick='() => ActionTable(customer.CustomerNo.ToString())' class="linkbtn">Ubah</a>
                    <a @onclick:preventDefault @onclick='() => Detail(customer.CustomerNo.ToString())' class="linkbtn">Lihat</a>
                    <a @onclick:preventDefault @onclick='() => Delete(customer.CustomerNo.ToString())' class="linkbtn">Hapus</a>
                </td>
            </RowTemplate>
        </TableTemplate>
        <div>
            <input type="submit" @onclick:preventDefault @onclick='() => ActionButton("add")' name="BtnAdd" value="Tambah Data" id="MainContent_BtnAdd" class="btn btn-success" />
        </div>
    }
    if (ShowInput)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="@DoSave">
            <DataAnnotationsValidator />
            <div class="form-group">
                <lable><h4>Informasi Customer:</h4></lable>
            </div>
            <div class="form-group">
                <label>Nomor Customer:</label>
                <label ID="TxtNoCustomer" runat="server" visible="true">@noCustomer</label>
            </div>
            <div class="form-group">
                <label for="customername">Nama Customer:</label>
                <InputText @bind-Value="modelcustomer.CustomerName" class="form-control" />
                <ValidationMessage For="@(() => modelcustomer.CustomerName)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="customeremail">Email Customer:</label>
                <InputText @bind-Value="modelcustomer.CustomerEmail" class="form-control" name="customeremail"></InputText>
                <ValidationMessage For="@(() => modelcustomer.CustomerEmail)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="companyname">Nama Perusahaan:</label>
                <InputText @bind-Value="modelcustomer.CompanyName" class="form-control" name="companyname" />
                <ValidationMessage For="@(() => modelcustomer.CompanyName)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="companyaddress">Alamat Perusahaan:</label>
                <InputTextArea @bind-Value="modelcustomer.CompanyAddress" class="form-control" name="companyaddress" />
                <ValidationMessage For="@(() => modelcustomer.CompanyAddress)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="companyphone">Nomor Telpon Perusahaan:</label>
                <InputText @bind-Value="modelcustomer.CompanyPhone" class="form-control" name="companyphone" />
                <ValidationMessage For="@(() => modelcustomer.CompanyPhone)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="companyemail">Email Perusahaan:</label>
                <InputText @bind-Value="modelcustomer.CompanyEmail" class="form-control" name="companyemail" />
                <ValidationMessage For="@(() => modelcustomer.CompanyEmail)"></ValidationMessage>
            </div>
            <div class="form-group">
                <label for="accountNo">Kode Akun:</label>
                <select @bind="modelcustomer.AccountNo" class="form-control">
                    @if (objAccount != null)
                            {
                                foreach (var item in objAccount)
                                {
                            <option value="@item.AccountNo">@item.AccountNo</option>
                                }
                            }
                </select>
            </div>
            <input type="submit" class="btn btn-success" disabled="@IsDisabled" name="BtnSave" value="@save" />
            <input type="submit" class="btn btn-danger" name="BtnCancel" value="@cancel" @onclick:preventDefault @onclick='() => ActionButton("cancel")' />
        </EditForm>
    }
    if (ShowDetail)
    {
            <div class="form-group">
                <lable><h4>Informasi Customer:</h4></lable>
            </div>
            <div class="form-group">
                <label>Nomor Customer:</label>
                <label ID="TxtNoCustomer" runat="server" visible="true">@noCustomer</label>
            </div>
            <div class="form-group">
                <label>Nama Customer:</label>
                <label class="form-control">@modelcustomer.CustomerName</label>
            </div>
            <div class="form-group">
                <label>Email Customer:</label>
                <label class="form-control">@modelcustomer.CustomerEmail</label>
            </div>
            <div class="form-group">
                <label>Nama Perusahaan:</label>
                <label class="form-control">@modelcustomer.CompanyName</label>
            </div>
            <div class="form-group">
                <label>Alamat Perusahaan:</label>
                <label class="form-control">@modelcustomer.CompanyAddress</label>
            </div>
            <div class="form-group">
                <label>Nomor Telpon Perusahaan:</label>
                <label class="form-control">@modelcustomer.CompanyPhone</label>
            </div>
            <div class="form-group">
                <label>Email Perusahaan:</label>
                <label class="form-control">@modelcustomer.CompanyEmail</label>
            </div>
            <div class="form-group">
                <label>Kode Akun:</label>
                <label class="form-control">@modelcustomer.AccountNo</label>
            </div>
            <input type="submit" class="btn btn-danger" name="BtnCancel" value="@cancel" @onclick:preventDefault @onclick='() => ActionButton("cancel")' />
    }
    if (ShowDelete)
    {
        <div class="form-group">
            <lable><h4>Apakah anda yakin ingin menghapus data ini?</h4></lable>
        </div>
        <a @onclick:preventDefault @onclick='() => DoDelete(modelcustomer.CustomerNo.ToString())' class="btn btn-success">Ya</a>
        @*<input type="submit" class="btn btn-success" name="BtnUpdate" value="@update" hidden="hidden"/>*@
        <input type="submit" class="btn btn-danger" name="BtnCancel" value="Tidak" @onclick:preventDefault @onclick='() => ActionButton("cancel")' />
    }
}

@code {
    private EditContext editContext;
    protected bool IsDisabled = true;

    string noCustomer = "Otomatis";
    string save = "Simpan";
    string cancel = "Kembali";

    enum ModeForm { ViewData, UpdateData, DetailData, AddData }

    bool ShowTable { get; set; } = true;
    bool ShowInput { get; set; } = false;
    bool ShowDetail { get; set; } = false;
    bool ShowDelete { get; set; } = false;

    CustomersServices customerService = new CustomersServices();
    AccountControls accountControl = new AccountControls();
    Customertbl modelcustomer = new Customertbl();
    List<Customertbl> objCustomer = new List<Customertbl>();
    List<Accounttbl> objAccount = new List<Accounttbl>();

    protected override async Task OnInitializedAsync()
    {
        RefreshGrid();
        var ret = accountControl.GetData();
        var datas = ret.Result;
        objAccount = datas.ToList();
        editContext = new EditContext(modelcustomer);
    }

    //validation state change
    private void OnValidationStateChanged(object sender, ValidationStateChangedEventArgs e)
    {
        IsDisabled = editContext.GetValidationMessages().Any();
        StateHasChanged();
    }

    //Action For Table
    void ActionTable(string ids)
    {
        ShowTable = false;
        ShowInput = true;
        ShowDetail = false;
        ShowDelete = false;
        LoadDetail(ids);
        StateHasChanged();
    }

    //Detail
    void Detail(string ids)
    {
        ShowTable = false;
        ShowInput = false;
        ShowDetail = true;
        ShowDelete = false;
        LoadDetail(ids);
        StateHasChanged();
    }

    //Delete
    void Delete(string ids)
    {
        ShowTable = false;
        ShowInput = false;
        ShowDelete = true;
        LoadDetail(ids);
        StateHasChanged();
    }

    //Load detail data
    void LoadDetail(string fid)
    {
        save = "Ubah";
        var ret = customerService.DetailData(fid);
        var data = ret.Result;
        noCustomer = data.CustomerNo.ToString();

        if (data != null)
        {
            modelcustomer = data;
        }
    }

    //Action Button
    void ActionButton(string commandname)
    {
        try
        {
            var command = commandname;

            switch (command)
            {
                //case "save":
                //    SetLayout(ModeForm.ViewData);
                //    break;

                case "add":
                    IsDisabled = true;
                    save = "Simpan";
                    SetLayout(ModeForm.AddData);
                    break;

                case "update":
                    SetLayout(ModeForm.UpdateData);
                    break;

                case "cancel":
                    save = "Simpan";
                    noCustomer = "Otomatis";
                    modelcustomer = new Customertbl();
                    editContext = new EditContext(modelcustomer);
                    SetLayout(ModeForm.ViewData);
                    break;
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError("Terjadi kesalahan: " + ex.Message);
        }
    }

    //Set Layout
    void SetLayout(ModeForm mode)
    {
        switch (mode)
        {
            case ModeForm.AddData:
                ShowTable = false;
                ShowInput = true;
                ShowDetail = false;
                ShowDelete = false;
                RefreshGrid();
                StateHasChanged();
                break;
            case ModeForm.UpdateData:

                break;
            case ModeForm.ViewData:
                ShowTable = true;
                ShowInput = false;
                ShowDetail = false;
                ShowDelete = false;
                objCustomer = new List<Customertbl>();
                RefreshGrid();
                StateHasChanged();
                break;
        }
    }

    // Reload datagrid
    protected void RefreshGrid(string param = "")
    {

        if (param == null || param == "")
        {

            var ret = customerService.GetData();
            var datas = ret.Result;

            if (datas != null && datas.Count() > 0)
            {
                objCustomer = datas.ToList();
                editContext = new EditContext(objCustomer);
                editContext.OnValidationStateChanged += OnValidationStateChanged;
                modelcustomer = new Customertbl();
                StateHasChanged();
                //GvData.DataBind();
            }
        }
        else
        {
            var ret = customerService.GetDataByContaint(param);
            var datas = ret.Result;

            if (datas != null && datas.Count() > 0)
            {
                objCustomer = datas.ToList();
                editContext = new EditContext(objCustomer);
                modelcustomer = new Customertbl();
                editContext.OnValidationStateChanged += OnValidationStateChanged;
                StateHasChanged();
            }
        }
    }

    //Do Save
    private void DoSave()
    {
        string id = noCustomer;
        var data = modelcustomer;

        var ret = customerService.AddData(data);
        if (save == "Ubah")
        {
            ret = customerService.UpdateData(id, data);
        }

        if (ret.Result)
        {
            SetLayout(ModeForm.ViewData);
            save = "Simpan";
            noCustomer = "Otomatis";
            toastService.ShowSuccess("data berhasil disimpan");
        }
        else
        {
            toastService.ShowError("Gagal menyimpan data");
        }
    }

    //Do Delete
    private void DoDelete(string id)
    {
        var ret = customerService.DeleteData(id);

        if (ret.Result)
        {
            SetLayout(ModeForm.ViewData);
            save = "Simpan";
            noCustomer = "Otomatis";
            toastService.ShowSuccess("data berhasil dihapus");
        }
        else
        {
            toastService.ShowError("Gagal menghapus data");
        }
    }
}
